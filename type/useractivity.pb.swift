// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: ssigmaapi/type/useractivity.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Ssigmaapi_Type_UserActivity {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// milisecond
  var startTimestamp: Int64 {
    get {return _storage._startTimestamp}
    set {_uniqueStorage()._startTimestamp = newValue}
  }

  /// milisecond
  var endTimestamp: Int64 {
    get {return _storage._endTimestamp}
    set {_uniqueStorage()._endTimestamp = newValue}
  }

  var keyboardInput: Ssigmaapi_Type_KeyboardInput {
    get {return _storage._keyboardInput ?? Ssigmaapi_Type_KeyboardInput()}
    set {_uniqueStorage()._keyboardInput = newValue}
  }
  /// Returns true if `keyboardInput` has been explicitly set.
  var hasKeyboardInput: Bool {return _storage._keyboardInput != nil}
  /// Clears the value of `keyboardInput`. Subsequent reads from it will return its default value.
  mutating func clearKeyboardInput() {_uniqueStorage()._keyboardInput = nil}

  var windowList: [Ssigmaapi_Type_ApplicationWindow] {
    get {return _storage._windowList}
    set {_uniqueStorage()._windowList = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Ssigmaapi_Type_KeyboardInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var strokeCount: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Ssigmaapi_Type_Point {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var x: Int64 = 0

  var y: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Ssigmaapi_Type_ApplicationWindow {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var lefttop: Ssigmaapi_Type_Point {
    get {return _storage._lefttop ?? Ssigmaapi_Type_Point()}
    set {_uniqueStorage()._lefttop = newValue}
  }
  /// Returns true if `lefttop` has been explicitly set.
  var hasLefttop: Bool {return _storage._lefttop != nil}
  /// Clears the value of `lefttop`. Subsequent reads from it will return its default value.
  mutating func clearLefttop() {_uniqueStorage()._lefttop = nil}

  var height: Int64 {
    get {return _storage._height}
    set {_uniqueStorage()._height = newValue}
  }

  var width: Int64 {
    get {return _storage._width}
    set {_uniqueStorage()._width = newValue}
  }

  /// アプリケーションタイトル
  var title: String {
    get {return _storage._title}
    set {_uniqueStorage()._title = newValue}
  }

  /// アプリ名（MicrosoftR WindowsR Operation System、Slack、Google Chromeなど）
  var programName: String {
    get {return _storage._programName}
    set {_uniqueStorage()._programName = newValue}
  }

  /// アプリ詳細名（エクスプローラー、Slack、Google Chromeなど）
  var description_p: String {
    get {return _storage._description_p}
    set {_uniqueStorage()._description_p = newValue}
  }

  /// アプリ開発元
  var company: String {
    get {return _storage._company}
    set {_uniqueStorage()._company = newValue}
  }

  var isForeground: Bool {
    get {return _storage._isForeground}
    set {_uniqueStorage()._isForeground = newValue}
  }

  var windowState: Ssigmaapi_Type_ApplicationWindow.WindowState {
    get {return _storage._windowState}
    set {_uniqueStorage()._windowState = newValue}
  }

  /// milisecond
  var timestamp: Int64 {
    get {return _storage._timestamp}
    set {_uniqueStorage()._timestamp = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum WindowState: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case normal // = 0
    case maximized // = 1
    case minimized // = 2
    case UNRECOGNIZED(Int)

    init() {
      self = .normal
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .normal
      case 1: self = .maximized
      case 2: self = .minimized
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .normal: return 0
      case .maximized: return 1
      case .minimized: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension Ssigmaapi_Type_ApplicationWindow.WindowState: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Ssigmaapi_Type_ApplicationWindow.WindowState] = [
    .normal,
    .maximized,
    .minimized,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "ssigmaapi.type"

extension Ssigmaapi_Type_UserActivity: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UserActivity"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "start_timestamp"),
    2: .standard(proto: "end_timestamp"),
    3: .standard(proto: "keyboard_input"),
    4: .standard(proto: "window_list"),
  ]

  fileprivate class _StorageClass {
    var _startTimestamp: Int64 = 0
    var _endTimestamp: Int64 = 0
    var _keyboardInput: Ssigmaapi_Type_KeyboardInput? = nil
    var _windowList: [Ssigmaapi_Type_ApplicationWindow] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _startTimestamp = source._startTimestamp
      _endTimestamp = source._endTimestamp
      _keyboardInput = source._keyboardInput
      _windowList = source._windowList
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt64Field(value: &_storage._startTimestamp)
        case 2: try decoder.decodeSingularInt64Field(value: &_storage._endTimestamp)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._keyboardInput)
        case 4: try decoder.decodeRepeatedMessageField(value: &_storage._windowList)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._startTimestamp != 0 {
        try visitor.visitSingularInt64Field(value: _storage._startTimestamp, fieldNumber: 1)
      }
      if _storage._endTimestamp != 0 {
        try visitor.visitSingularInt64Field(value: _storage._endTimestamp, fieldNumber: 2)
      }
      if let v = _storage._keyboardInput {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if !_storage._windowList.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._windowList, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ssigmaapi_Type_UserActivity, rhs: Ssigmaapi_Type_UserActivity) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._startTimestamp != rhs_storage._startTimestamp {return false}
        if _storage._endTimestamp != rhs_storage._endTimestamp {return false}
        if _storage._keyboardInput != rhs_storage._keyboardInput {return false}
        if _storage._windowList != rhs_storage._windowList {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ssigmaapi_Type_KeyboardInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".KeyboardInput"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "stroke_count"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.strokeCount)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.strokeCount != 0 {
      try visitor.visitSingularInt64Field(value: self.strokeCount, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ssigmaapi_Type_KeyboardInput, rhs: Ssigmaapi_Type_KeyboardInput) -> Bool {
    if lhs.strokeCount != rhs.strokeCount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ssigmaapi_Type_Point: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Point"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "x"),
    2: .same(proto: "y"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.x)
      case 2: try decoder.decodeSingularInt64Field(value: &self.y)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.x != 0 {
      try visitor.visitSingularInt64Field(value: self.x, fieldNumber: 1)
    }
    if self.y != 0 {
      try visitor.visitSingularInt64Field(value: self.y, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ssigmaapi_Type_Point, rhs: Ssigmaapi_Type_Point) -> Bool {
    if lhs.x != rhs.x {return false}
    if lhs.y != rhs.y {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ssigmaapi_Type_ApplicationWindow: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ApplicationWindow"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "lefttop"),
    2: .same(proto: "height"),
    3: .same(proto: "width"),
    4: .same(proto: "title"),
    5: .standard(proto: "program_name"),
    6: .same(proto: "description"),
    7: .same(proto: "company"),
    8: .standard(proto: "is_foreground"),
    9: .standard(proto: "window_state"),
    10: .same(proto: "timestamp"),
  ]

  fileprivate class _StorageClass {
    var _lefttop: Ssigmaapi_Type_Point? = nil
    var _height: Int64 = 0
    var _width: Int64 = 0
    var _title: String = String()
    var _programName: String = String()
    var _description_p: String = String()
    var _company: String = String()
    var _isForeground: Bool = false
    var _windowState: Ssigmaapi_Type_ApplicationWindow.WindowState = .normal
    var _timestamp: Int64 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _lefttop = source._lefttop
      _height = source._height
      _width = source._width
      _title = source._title
      _programName = source._programName
      _description_p = source._description_p
      _company = source._company
      _isForeground = source._isForeground
      _windowState = source._windowState
      _timestamp = source._timestamp
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._lefttop)
        case 2: try decoder.decodeSingularInt64Field(value: &_storage._height)
        case 3: try decoder.decodeSingularInt64Field(value: &_storage._width)
        case 4: try decoder.decodeSingularStringField(value: &_storage._title)
        case 5: try decoder.decodeSingularStringField(value: &_storage._programName)
        case 6: try decoder.decodeSingularStringField(value: &_storage._description_p)
        case 7: try decoder.decodeSingularStringField(value: &_storage._company)
        case 8: try decoder.decodeSingularBoolField(value: &_storage._isForeground)
        case 9: try decoder.decodeSingularEnumField(value: &_storage._windowState)
        case 10: try decoder.decodeSingularInt64Field(value: &_storage._timestamp)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._lefttop {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if _storage._height != 0 {
        try visitor.visitSingularInt64Field(value: _storage._height, fieldNumber: 2)
      }
      if _storage._width != 0 {
        try visitor.visitSingularInt64Field(value: _storage._width, fieldNumber: 3)
      }
      if !_storage._title.isEmpty {
        try visitor.visitSingularStringField(value: _storage._title, fieldNumber: 4)
      }
      if !_storage._programName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._programName, fieldNumber: 5)
      }
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 6)
      }
      if !_storage._company.isEmpty {
        try visitor.visitSingularStringField(value: _storage._company, fieldNumber: 7)
      }
      if _storage._isForeground != false {
        try visitor.visitSingularBoolField(value: _storage._isForeground, fieldNumber: 8)
      }
      if _storage._windowState != .normal {
        try visitor.visitSingularEnumField(value: _storage._windowState, fieldNumber: 9)
      }
      if _storage._timestamp != 0 {
        try visitor.visitSingularInt64Field(value: _storage._timestamp, fieldNumber: 10)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ssigmaapi_Type_ApplicationWindow, rhs: Ssigmaapi_Type_ApplicationWindow) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._lefttop != rhs_storage._lefttop {return false}
        if _storage._height != rhs_storage._height {return false}
        if _storage._width != rhs_storage._width {return false}
        if _storage._title != rhs_storage._title {return false}
        if _storage._programName != rhs_storage._programName {return false}
        if _storage._description_p != rhs_storage._description_p {return false}
        if _storage._company != rhs_storage._company {return false}
        if _storage._isForeground != rhs_storage._isForeground {return false}
        if _storage._windowState != rhs_storage._windowState {return false}
        if _storage._timestamp != rhs_storage._timestamp {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ssigmaapi_Type_ApplicationWindow.WindowState: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NORMAL"),
    1: .same(proto: "MAXIMIZED"),
    2: .same(proto: "MINIMIZED"),
  ]
}
