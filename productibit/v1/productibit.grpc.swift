//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: ssigmaapi/productibit/v1/productibit.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import Dispatch
import SwiftGRPC
import SwiftProtobuf

internal protocol Ssigmaapi_Productibit_V1_ProductibitServiceV1UploadSensorCall: ClientCallUnary {}

fileprivate final class Ssigmaapi_Productibit_V1_ProductibitServiceV1UploadSensorCallBase: ClientCallUnaryBase<Ssigmaapi_Productibit_V1_SensorMessage, SwiftProtobuf.Google_Protobuf_Empty>, Ssigmaapi_Productibit_V1_ProductibitServiceV1UploadSensorCall {
  override class var method: String { return "/ssigmaapi.productibit.v1.ProductibitServiceV1/UploadSensor" }
}


/// Instantiate Ssigmaapi_Productibit_V1_ProductibitServiceV1ServiceClient, then call methods of this protocol to make API calls.
internal protocol Ssigmaapi_Productibit_V1_ProductibitServiceV1Service: ServiceClient {
  /// Synchronous. Unary.
  func uploadSensor(_ request: Ssigmaapi_Productibit_V1_SensorMessage) throws -> SwiftProtobuf.Google_Protobuf_Empty
  /// Asynchronous. Unary.
  func uploadSensor(_ request: Ssigmaapi_Productibit_V1_SensorMessage, completion: @escaping (SwiftProtobuf.Google_Protobuf_Empty?, CallResult) -> Void) throws -> Ssigmaapi_Productibit_V1_ProductibitServiceV1UploadSensorCall

}

internal final class Ssigmaapi_Productibit_V1_ProductibitServiceV1ServiceClient: ServiceClientBase, Ssigmaapi_Productibit_V1_ProductibitServiceV1Service {
  /// Synchronous. Unary.
  internal func uploadSensor(_ request: Ssigmaapi_Productibit_V1_SensorMessage) throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try Ssigmaapi_Productibit_V1_ProductibitServiceV1UploadSensorCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func uploadSensor(_ request: Ssigmaapi_Productibit_V1_SensorMessage, completion: @escaping (SwiftProtobuf.Google_Protobuf_Empty?, CallResult) -> Void) throws -> Ssigmaapi_Productibit_V1_ProductibitServiceV1UploadSensorCall {
    return try Ssigmaapi_Productibit_V1_ProductibitServiceV1UploadSensorCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

}

/// To build a server, implement a class that conforms to this protocol.
/// If one of the methods returning `ServerStatus?` returns nil,
/// it is expected that you have already returned a status to the client by means of `session.close`.
internal protocol Ssigmaapi_Productibit_V1_ProductibitServiceV1Provider: ServiceProvider {
  func uploadSensor(request: Ssigmaapi_Productibit_V1_SensorMessage, session: Ssigmaapi_Productibit_V1_ProductibitServiceV1UploadSensorSession) throws -> SwiftProtobuf.Google_Protobuf_Empty
}

extension Ssigmaapi_Productibit_V1_ProductibitServiceV1Provider {
  internal var serviceName: String { return "ssigmaapi.productibit.v1.ProductibitServiceV1" }

  /// Determines and calls the appropriate request handler, depending on the request's method.
  /// Throws `HandleMethodError.unknownMethod` for methods not handled by this service.
  internal func handleMethod(_ method: String, handler: Handler) throws -> ServerStatus? {
    switch method {
    case "/ssigmaapi.productibit.v1.ProductibitServiceV1/UploadSensor":
      return try Ssigmaapi_Productibit_V1_ProductibitServiceV1UploadSensorSessionBase(
        handler: handler,
        providerBlock: { try self.uploadSensor(request: $0, session: $1 as! Ssigmaapi_Productibit_V1_ProductibitServiceV1UploadSensorSessionBase) })
          .run()
    default:
      throw HandleMethodError.unknownMethod
    }
  }
}

internal protocol Ssigmaapi_Productibit_V1_ProductibitServiceV1UploadSensorSession: ServerSessionUnary {}

fileprivate final class Ssigmaapi_Productibit_V1_ProductibitServiceV1UploadSensorSessionBase: ServerSessionUnaryBase<Ssigmaapi_Productibit_V1_SensorMessage, SwiftProtobuf.Google_Protobuf_Empty>, Ssigmaapi_Productibit_V1_ProductibitServiceV1UploadSensorSession {}

